import eina_types;

class Test.Testing (Efl.Object) {
   methods {
      return_object {
         return: Test.Testing;
      }

      in_stringshare {
         params {
            @in v: stringshare;
         }
         return: own(stringshare);
      }
      in_own_stringshare {
         params {
            @in v: own(stringshare);
         }
         return: own(stringshare);
      }

      out_stringshare {
         params {
            @out v: stringshare;
         }
      }
      out_own_stringshare {
         params {
            @out v: own(stringshare);
         }
      }

      return_stringshare {
         return: stringshare;
      }
      return_own_stringshare {
         return: own(stringshare);
      }

      in_string {
         params {
            @in str: string;
         }
         return: own(string);
      }

      in_own_string {
         params {
            @in str: own(string);
         }
         return: own(string);
      }

      return_string {
         return: string;
      }

      return_own_string {
         return: own(string);
      }

      out_string {
         params {
            @out str: string;
         }
      }

      out_own_string {
         params {
            @out str: own(string);
         }
      }

      call_in_string {
        params {
            @in str: string;
        }
      }

      call_in_own_string {
        params {
            @in str: own(string);
        }
      }

      call_return_string {
         return: string;
      }

      call_return_own_string {
         return: own(string);
      }

      call_out_string {
         return: string;
      }

      call_out_own_string {
         return: own(string);
      }

      // Stringshare virtual helpers
      call_in_stringshare {
        params {
            @in str: stringshare;
        }
        return: stringshare;
      }

      call_in_own_stringshare {
        params {
            @in str: stringshare;
        }
        return: own(stringshare);
      }

      call_return_stringshare {
         return: stringshare;
      }

      call_return_own_stringshare {
         return: own(stringshare);
      }

      call_out_stringshare {
         return: stringshare;
      }

      call_out_own_stringshare {
         return: own(stringshare);
      }

      eina_slice_in {
         params {
            @in slice: Eina.Slice;
         }
         return: bool;
      }

      eina_rw_slice_in {
         params {
            @in slice: Eina.Rw_Slice;
         }
         return: bool;
      }

      eina_slice_out {
         params {
            @out slice: Eina.Slice;
         }
         return: bool;
      }

      eina_rw_slice_out {
         params {
            @out slice: Eina.Rw_Slice;
         }
         return: bool;
      }

      /*
      eina_slice_return {
         return: Eina.Slice;
      }

      eina_rw_slice_return {
         return: Eina.Rw_Slice;
      }
      */

      eina_binbuf_in {
         params {
            @in binbuf: ptr(Eina.Binbuf);
         }
         return: bool;
      }

      eina_binbuf_in_own {
         params {
            @in binbuf: own(ptr(Eina.Binbuf));
         }
         return: bool;
      }
      check_binbuf_in_own {
         return: bool;
      }

      eina_binbuf_out {
         params {
            @out binbuf: ptr(Eina.Binbuf);
         }
         return: bool;
      }
      check_binbuf_out {
         return: bool;
      }

      eina_binbuf_out_own {
         params {
            @out binbuf: own(ptr(Eina.Binbuf));
         }
         return: bool;
      }

      eina_binbuf_return {
         return: ptr(Eina.Binbuf);
      }
      check_binbuf_return {
         return: bool;
      }

      eina_binbuf_return_own {
         return: own(ptr(Eina.Binbuf));
      }
   }
}
