import eina_types;

function SimpleCb {
   params {
      a: int;
   }
   return: int;
};

class Test.Testing (Efl.Object) {
   methods {
      return_object {
         return: Test.Testing;
      }

      in_stringshare {
         params {
            @in v: stringshare;
         }
         return: own(stringshare);
      }
      in_own_stringshare {
         params {
            @in v: own(stringshare);
         }
         return: own(stringshare);
      }

      out_stringshare {
         params {
            @out v: stringshare;
         }
      }
      out_own_stringshare {
         params {
            @out v: own(stringshare);
         }
      }

      return_stringshare {
         return: stringshare;
      }
      return_own_stringshare {
         return: own(stringshare);
      }

      in_string {
         params {
            @in str: string;
         }
         return: own(string);
      }

      in_own_string {
         params {
            @in str: own(string);
         }
         return: own(string);
      }

      return_string {
         return: string;
      }

      return_own_string {
         return: own(string);
      }

      out_string {
         params {
            @out str: string;
         }
      }

      out_own_string {
         params {
            @out str: own(string);
         }
      }

      call_in_string {
        params {
            @in str: string;
        }
      }

      call_in_own_string {
        params {
            @in str: own(string);
        }
      }

      call_return_string {
         return: string;
      }

      call_return_own_string {
         return: own(string);
      }

      call_out_string {
         return: string;
      }

      call_out_own_string {
         return: own(string);
      }

      // Stringshare virtual helpers
      call_in_stringshare {
        params {
            @in str: stringshare;
        }
      }

      call_in_own_stringshare {
        params {
            @in str: own(stringshare);
        }
      }

      call_return_stringshare {
         return: stringshare;
      }

      call_return_own_stringshare {
         return: own(stringshare);
      }

      call_out_stringshare {
         return: stringshare;
      }

      call_out_own_stringshare {
         return: own(stringshare);
      }

      eina_slice_in {
         params {
            @in slice: Eina.Slice;
         }
         return: bool;
      }

      eina_rw_slice_in {
         params {
            @in slice: Eina.Rw_Slice;
         }
         return: bool;
      }

      eina_slice_out {
         params {
            @out slice: Eina.Slice;
         }
         return: bool;
      }

      eina_rw_slice_out {
         params {
            @out slice: Eina.Rw_Slice;
         }
         return: bool;
      }

      /*
      eina_slice_return {
         return: Eina.Slice;
      }

      eina_rw_slice_return {
         return: Eina.Rw_Slice;
      }
      */

      eina_binbuf_in {
         params {
            @in binbuf: ptr(Eina.Binbuf);
         }
         return: bool;
      }

      eina_binbuf_in_own {
         params {
            @in binbuf: own(ptr(Eina.Binbuf));
         }
         return: bool;
      }
      check_binbuf_in_own {
         return: bool;
      }

      eina_binbuf_out {
         params {
            @out binbuf: ptr(Eina.Binbuf);
         }
         return: bool;
      }
      check_binbuf_out {
         return: bool;
      }

      eina_binbuf_out_own {
         params {
            @out binbuf: own(ptr(Eina.Binbuf));
         }
         return: bool;
      }

      eina_binbuf_return {
         return: ptr(Eina.Binbuf);
      }
      check_binbuf_return {
         return: bool;
      }

      eina_binbuf_return_own {
         return: own(ptr(Eina.Binbuf));
      }

      /* Eina Array */

      /* Integer */
      eina_array_int_in {
         params {
            @in arr: array<int>;
         }
         return: bool;
      }

      eina_array_int_in_own {
         params {
            @in arr: own(array<own(ptr(int))>);
         }
         return: bool;
      }
      check_eina_array_int_in_own {
         return: bool;
      }

      eina_array_int_out {
         params {
            @out arr: array<int>;
         }
         return: bool;
      }
      check_eina_array_int_out {
         return: bool;
      }

      eina_array_int_out_own {
         params {
            @out arr: own(array<own(ptr(int))>);
         }
         return: bool;
      }

      eina_array_int_return {
         return: array<int>;
      }
      check_eina_array_int_return {
         return: bool;
      }

      eina_array_int_return_own {
         return: own(array<own(ptr(int))>);
      }

      /* String */
      eina_array_str_in {
         params {
            @in arr: array<string>;
         }
         return: bool;
      }

      eina_array_str_in_own {
         params {
            @in arr: own(array<own(string)>);
         }
         return: bool;
      }
      check_eina_array_str_in_own {
         return: bool;
      }

      eina_array_str_out {
         params {
            @out arr: array<string>;
         }
         return: bool;
      }
      check_eina_array_str_out {
         return: bool;
      }

      eina_array_str_out_own {
         params {
            @out arr: own(array<own(string)>);
         }
         return: bool;
      }

      eina_array_str_return {
         return: array<string>;
      }
      check_eina_array_str_return {
         return: bool;
      }

      eina_array_str_return_own {
         return: own(array<own(string)>);
      }

      /* Object */
      eina_array_obj_in {
         params {
            @in arr: array<Test.Numberwrapper>;
         }
         return: bool;
      }

      eina_array_obj_in_own {
         params {
            @in arr: own(array<own(Test.Numberwrapper)>);
         }
         return: bool;
      }
      check_eina_array_obj_in_own {
         return: bool;
      }

      eina_array_obj_out {
         params {
            @out arr: array<Test.Numberwrapper>;
         }
         return: bool;
      }
      check_eina_array_obj_out {
         return: bool;
      }

      eina_array_obj_out_own {
         params {
            @out arr: own(array<own(Test.Numberwrapper)>);
         }
         return: bool;
      }

      eina_array_obj_return {
         return: array<Test.Numberwrapper>;
      }
      check_eina_array_obj_return {
         return: bool;
      }

      eina_array_obj_return_own {
         return: own(array<own(Test.Numberwrapper)>);
      }

      eina_array_obj_return_in {
         params {
            @in arr: array<Test.Numberwrapper>;
         }
         return: array<Test.Numberwrapper>;
     }

      /* Eina List */

      /* Integer */
      eina_list_int_in {
         params {
            @in lst: list<int>;
         }
         return: bool;
      }

      eina_list_int_in_own {
         params {
            @in lst: own(list<own(ptr(int))>);
         }
         return: bool;
      }
      check_eina_list_int_in_own {
         return: bool;
      }

      eina_list_int_out {
         params {
            @out lst: list<int>;
         }
         return: bool;
      }
      check_eina_list_int_out {
         return: bool;
      }

      eina_list_int_out_own {
         params {
            @out lst: own(list<own(ptr(int))>);
         }
         return: bool;
      }

      eina_list_int_return {
         return: list<int>;
      }
      check_eina_list_int_return {
         return: bool;
      }

      eina_list_int_return_own {
         return: own(list<own(ptr(int))>);
      }

      /* String */
      eina_list_str_in {
         params {
            @in lst: list<string>;
         }
         return: bool;
      }

      eina_list_str_in_own {
         params {
            @in lst: own(list<own(string)>);
         }
         return: bool;
      }
      check_eina_list_str_in_own {
         return: bool;
      }

      eina_list_str_out {
         params {
            @out lst: list<string>;
         }
         return: bool;
      }
      check_eina_list_str_out {
         return: bool;
      }

      eina_list_str_out_own {
         params {
            @out lst: own(list<own(string)>);
         }
         return: bool;
      }

      eina_list_str_return {
         return: list<string>;
      }
      check_eina_list_str_return {
         return: bool;
      }

      eina_list_str_return_own {
         return: own(list<own(string)>);
      }

      /* Object */
      eina_list_obj_in {
         params {
            @in lst: list<Test.Numberwrapper>;
         }
         return: bool;
      }

      eina_list_obj_in_own {
         params {
            @in lst: own(list<own(Test.Numberwrapper)>);
         }
         return: bool;
      }
      check_eina_list_obj_in_own {
         return: bool;
      }

      eina_list_obj_out {
         params {
            @out lst: list<Test.Numberwrapper>;
         }
         return: bool;
      }
      check_eina_list_obj_out {
         return: bool;
      }

      eina_list_obj_out_own {
         params {
            @out lst: own(list<own(Test.Numberwrapper)>);
         }
         return: bool;
      }

      eina_list_obj_return {
         return: list<Test.Numberwrapper>;
      }
      check_eina_list_obj_return {
         return: bool;
      }

      eina_list_obj_return_own {
         return: own(list<own(Test.Numberwrapper)>);
      }

      eina_list_obj_return_in {
         params {
            @in lst: list<Test.Numberwrapper>;
         }
         return: list<Test.Numberwrapper>;
      }


     set_callback {
         params {
            cb: SimpleCb;
         }
      }

      call_callback {
         params {
            a: int;
         }
         return: int;
      }

      call_set_callback {
      }

      raises_eina_error {

      }

      returns_error {
         return: Eina.Error;
      }
   }
   implements {
      class.constructor;
      class.destructor;
   }
}
