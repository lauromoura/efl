import eina_types;

function Test.SimpleCb {
   params {
      a: int;
   }
   return: int;
};

class Test.Testing (Efl.Object) {
   methods {
      return_object {
         return: Test.Testing;
      }

      in_stringshare {
         params {
            @in v: stringshare;
         }
         return: stringshare @owned;
      }
      in_own_stringshare {
         params {
            @in v: stringshare @owned;
         }
         return: stringshare @owned;
      }

      out_stringshare {
         params {
            @out v: stringshare;
         }
      }
      out_own_stringshare {
         params {
            @out v: stringshare @owned;
         }
      }

      return_stringshare {
         return: stringshare;
      }
      return_own_stringshare {
         return: stringshare @owned;
      }

      in_string {
         params {
            @in str: string;
         }
         return: string @owned;
      }

      in_own_string {
         params {
            @in str: mstring @owned;
         }
         return: mstring @owned;
      }

      return_string {
         return: string;
      }

      return_own_string {
         return: string @owned;
      }

      out_string {
         params {
            @out str: string;
         }
      }

      out_own_string {
         params {
            @out str: string @owned;
         }
      }

      call_in_string {
        params {
            @in str: string;
        }
      }

      call_in_own_string {
        params {
            @in str: mstring @owned;
        }
      }

      call_return_string {
         return: string;
      }

      call_return_own_string {
         return: string @owned;
      }

      call_out_string {
         return: string;
      }

      call_out_own_string {
         return: string @owned;
      }

      // Stringshare virtual helpers
      call_in_stringshare {
        params {
            @in str: stringshare;
        }
      }

      call_in_own_stringshare {
        params {
            @in str: stringshare @owned;
        }
      }

      call_return_stringshare {
         return: stringshare;
      }

      call_return_own_stringshare {
         return: stringshare @owned;
      }

      call_out_stringshare {
         return: stringshare;
      }

      call_out_own_stringshare {
         return: stringshare @owned;
      }

      eina_slice_in {
         params {
            @in slice: Eina.Slice;
         }
         return: bool;
      }

      eina_rw_slice_in {
         params {
            @in slice: Eina.Rw_Slice;
         }
         return: bool;
      }

      eina_slice_out {
         params {
            @out slice: Eina.Slice;
         }
         return: bool;
      }

      eina_rw_slice_out {
         params {
            @out slice: Eina.Rw_Slice;
         }
         return: bool;
      }

      /*
      eina_slice_return {
         return: Eina.Slice;
      }

      eina_rw_slice_return {
         return: Eina.Rw_Slice;
      }
      */

      eina_binbuf_in {
         params {
            @in binbuf: ptr(Eina.Binbuf);
         }
         return: bool;
      }

      eina_binbuf_in_own {
         params {
            @in binbuf: ptr(Eina.Binbuf) @owned;
         }
         return: bool;
      }
      check_binbuf_in_own {
         return: bool;
      }

      eina_binbuf_out {
         params {
            @out binbuf: ptr(Eina.Binbuf);
         }
         return: bool;
      }
      check_binbuf_out {
         return: bool;
      }

      eina_binbuf_out_own {
         params {
            @out binbuf: ptr(Eina.Binbuf) @owned;
         }
         return: bool;
      }

      eina_binbuf_return {
         return: ptr(Eina.Binbuf);
      }
      check_binbuf_return {
         return: bool;
      }

      eina_binbuf_return_own {
         return: ptr(Eina.Binbuf) @owned;
      }

      /* Eina Array */

      /* Integer */
      eina_array_int_in {
         params {
            @in arr: array<int>;
         }
         return: bool;
      }

      eina_array_int_in_own {
         params {
            @in arr: array<ptr(int) @owned> @owned;
         }
         return: bool;
      }
      check_eina_array_int_in_own {
         return: bool;
      }

      eina_array_int_out {
         params {
            @out arr: array<int>;
         }
         return: bool;
      }
      check_eina_array_int_out {
         return: bool;
      }

      eina_array_int_out_own {
         params {
            @out arr: array<ptr(int) @owned> @owned;
         }
         return: bool;
      }

      eina_array_int_return {
         return: array<int>;
      }
      check_eina_array_int_return {
         return: bool;
      }

      eina_array_int_return_own {
         return: array<ptr(int) @owned> @owned;
      }

      /* String */
      eina_array_str_in {
         params {
            @in arr: array<string>;
         }
         return: bool;
      }

      eina_array_str_in_own {
         params {
            @in arr: array<string @owned> @owned;
         }
         return: bool;
      }
      check_eina_array_str_in_own {
         return: bool;
      }

      eina_array_str_out {
         params {
            @out arr: array<string>;
         }
         return: bool;
      }
      check_eina_array_str_out {
         return: bool;
      }

      eina_array_str_out_own {
         params {
            @out arr: array<string @owned> @owned;
         }
         return: bool;
      }

      eina_array_str_return {
         return: array<string>;
      }
      check_eina_array_str_return {
         return: bool;
      }

      eina_array_str_return_own {
         return: array<string @owned> @owned;
      }

      /* Object */
      eina_array_obj_in {
         params {
            @in arr: array<Test.Numberwrapper>;
         }
         return: bool;
      }

      eina_array_obj_in_own {
         params {
            @in arr: array<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }
      check_eina_array_obj_in_own {
         return: bool;
      }

      eina_array_obj_out {
         params {
            @out arr: array<Test.Numberwrapper>;
         }
         return: bool;
      }
      check_eina_array_obj_out {
         return: bool;
      }

      eina_array_obj_out_own {
         params {
            @out arr: array<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }

      eina_array_obj_return {
         return: array<Test.Numberwrapper>;
      }
      check_eina_array_obj_return {
         return: bool;
      }

      eina_array_obj_return_own {
         return: array<Test.Numberwrapper @owned> @owned;
      }

      eina_array_obj_return_in {
         params {
            @in arr: array<Test.Numberwrapper>;
         }
         return: array<Test.Numberwrapper>;
     }

      /* Eina Inarray */

      /* Integer */
      eina_inarray_int_in {
         params {
            @in arr: inarray<int>;
         }
         return: bool;
      }

      eina_inarray_int_in_own {
         params {
            @in arr: inarray<ptr(int) @owned> @owned;
         }
         return: bool;
      }
      check_eina_inarray_int_in_own {
         return: bool;
      }

      eina_inarray_int_out {
         params {
            @out arr: inarray<int>;
         }
         return: bool;
      }
      check_eina_inarray_int_out {
         return: bool;
      }

      eina_inarray_int_out_own {
         params {
            @out arr: inarray<ptr(int) @owned> @owned;
         }
         return: bool;
      }

      eina_inarray_int_return {
         return: inarray<int>;
      }
      check_eina_inarray_int_return {
         return: bool;
      }

      eina_inarray_int_return_own {
         return: inarray<ptr(int) @owned> @owned;
      }

      /* String */
      eina_inarray_str_in {
         params {
            @in arr: inarray<string>;
         }
         return: bool;
      }

      eina_inarray_str_in_own {
         params {
            @in arr: inarray<string @owned> @owned;
         }
         return: bool;
      }
      check_eina_inarray_str_in_own {
         return: bool;
      }

      eina_inarray_str_out {
         params {
            @out arr: inarray<string>;
         }
         return: bool;
      }
      check_eina_inarray_str_out {
         return: bool;
      }

      eina_inarray_str_out_own {
         params {
            @out arr: inarray<string @owned> @owned;
         }
         return: bool;
      }

      eina_inarray_str_return {
         return: inarray<string>;
      }
      check_eina_inarray_str_return {
         return: bool;
      }

      eina_inarray_str_return_own {
         return: inarray<string @owned> @owned;
      }

      /* Object */
      eina_inarray_obj_in {
         params {
            @in arr: inarray<Test.Numberwrapper>;
         }
         return: bool;
      }

      eina_inarray_obj_in_own {
         params {
            @in arr: inarray<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }
      check_eina_inarray_obj_in_own {
         return: bool;
      }

      eina_inarray_obj_out {
         params {
            @out arr: inarray<Test.Numberwrapper>;
         }
         return: bool;
      }
      check_eina_inarray_obj_out {
         return: bool;
      }

      eina_inarray_obj_out_own {
         params {
            @out arr: inarray<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }

      eina_inarray_obj_return {
         return: inarray<Test.Numberwrapper>;
      }
      check_eina_inarray_obj_return {
         return: bool;
      }

      eina_inarray_obj_return_own {
         return: inarray<Test.Numberwrapper @owned> @owned;
      }

      eina_inarray_obj_return_in {
         params {
            @in arr: inarray<Test.Numberwrapper>;
         }
         return: inarray<Test.Numberwrapper>;
     }

      /* Eina List */

      /* Integer */
      eina_list_int_in {
         params {
            @in lst: list<int>;
         }
         return: bool;
      }

      eina_list_int_in_own {
         params {
            @in lst: list<ptr(int) @owned> @owned;
         }
         return: bool;
      }
      check_eina_list_int_in_own {
         return: bool;
      }

      eina_list_int_out {
         params {
            @out lst: list<int>;
         }
         return: bool;
      }
      check_eina_list_int_out {
         return: bool;
      }

      eina_list_int_out_own {
         params {
            @out lst: list<ptr(int) @owned> @owned;
         }
         return: bool;
      }

      eina_list_int_return {
         return: list<int>;
      }
      check_eina_list_int_return {
         return: bool;
      }

      eina_list_int_return_own {
         return: list<ptr(int) @owned> @owned;
      }

      /* String */
      eina_list_str_in {
         params {
            @in lst: list<string>;
         }
         return: bool;
      }

      eina_list_str_in_own {
         params {
            @in lst: list<string @owned> @owned;
         }
         return: bool;
      }
      check_eina_list_str_in_own {
         return: bool;
      }

      eina_list_str_out {
         params {
            @out lst: list<string>;
         }
         return: bool;
      }
      check_eina_list_str_out {
         return: bool;
      }

      eina_list_str_out_own {
         params {
            @out lst: list<string @owned> @owned;
         }
         return: bool;
      }

      eina_list_str_return {
         return: list<string>;
      }
      check_eina_list_str_return {
         return: bool;
      }

      eina_list_str_return_own {
         return: list<string @owned> @owned;
      }

      /* Object */
      eina_list_obj_in {
         params {
            @in lst: list<Test.Numberwrapper>;
         }
         return: bool;
      }

      eina_list_obj_in_own {
         params {
            @in lst: list<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }
      check_eina_list_obj_in_own {
         return: bool;
      }

      eina_list_obj_out {
         params {
            @out lst: list<Test.Numberwrapper>;
         }
         return: bool;
      }
      check_eina_list_obj_out {
         return: bool;
      }

      eina_list_obj_out_own {
         params {
            @out lst: list<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }

      eina_list_obj_return {
         return: list<Test.Numberwrapper>;
      }
      check_eina_list_obj_return {
         return: bool;
      }

      eina_list_obj_return_own {
         return: list<Test.Numberwrapper @owned> @owned;
      }

      eina_list_obj_return_in {
         params {
            @in lst: list<Test.Numberwrapper>;
         }
         return: list<Test.Numberwrapper>;
      }

      /* Eina Inlist */

      /* Integer */
      eina_inlist_int_in {
         params {
            @in lst: inlist<int>;
         }
         return: bool;
      }

      eina_inlist_int_in_own {
         params {
            @in lst: inlist<ptr(int) @owned> @owned;
         }
         return: bool;
      }
      check_eina_inlist_int_in_own {
         return: bool;
      }

      eina_inlist_int_out {
         params {
            @out lst: inlist<int>;
         }
         return: bool;
      }
      check_eina_inlist_int_out {
         return: bool;
      }

      eina_inlist_int_out_own {
         params {
            @out lst: inlist<ptr(int) @owned> @owned;
         }
         return: bool;
      }

      eina_inlist_int_return {
         return: inlist<int>;
      }
      check_eina_inlist_int_return {
         return: bool;
      }

      eina_inlist_int_return_own {
         return: inlist<ptr(int) @owned> @owned;
      }

      /* String */
      eina_inlist_str_in {
         params {
            @in lst: inlist<string>;
         }
         return: bool;
      }

      eina_inlist_str_in_own {
         params {
            @in lst: inlist<string @owned> @owned;
         }
         return: bool;
      }
      check_eina_inlist_str_in_own {
         return: bool;
      }

      eina_inlist_str_out {
         params {
            @out lst: inlist<string>;
         }
         return: bool;
      }
      check_eina_inlist_str_out {
         return: bool;
      }

      eina_inlist_str_out_own {
         params {
            @out lst: inlist<string @owned> @owned;
         }
         return: bool;
      }

      eina_inlist_str_return {
         return: inlist<string>;
      }
      check_eina_inlist_str_return {
         return: bool;
      }

      eina_inlist_str_return_own {
         return: inlist<string @owned> @owned;
      }

      /* Object */
      eina_inlist_obj_in {
         params {
            @in lst: inlist<Test.Numberwrapper>;
         }
         return: bool;
      }

      eina_inlist_obj_in_own {
         params {
            @in lst: inlist<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }
      check_eina_inlist_obj_in_own {
         return: bool;
      }

      eina_inlist_obj_out {
         params {
            @out lst: inlist<Test.Numberwrapper>;
         }
         return: bool;
      }
      check_eina_inlist_obj_out {
         return: bool;
      }

      eina_inlist_obj_out_own {
         params {
            @out lst: inlist<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }

      eina_inlist_obj_return {
         return: inlist<Test.Numberwrapper>;
      }
      check_eina_inlist_obj_return {
         return: bool;
      }

      eina_inlist_obj_return_own {
         return: inlist<Test.Numberwrapper @owned> @owned;
      }

      eina_inlist_obj_return_in {
         params {
            @in lst: inlist<Test.Numberwrapper>;
         }
         return: inlist<Test.Numberwrapper>;
      }


      // Eina Hash //

      // Integer //
      eina_hash_int_in {
         params {
            @in hsh: hash<int, int>;
         }
         return: bool;
      }

      eina_hash_int_in_own {
         params {
            @in hsh: hash<int, ptr(int) @owned> @owned;
         }
         return: bool;
      }
      check_eina_hash_int_in_own {
         return: bool;
      }

      eina_hash_int_out {
         params {
            @out hsh: hash<int, int>;
         }
         return: bool;
      }
      check_eina_hash_int_out {
         return: bool;
      }

      eina_hash_int_out_own {
         params {
            @out hsh: hash<int, ptr(int) @owned> @owned;
         }
         return: bool;
      }
      check_eina_hash_int_out_own {
         return: bool;
      }

      eina_hash_int_return {
         return: hash<int, int>;
      }
      check_eina_hash_int_return {
         return: bool;
      }

      eina_hash_int_return_own {
         return: hash<int, ptr(int) @owned> @owned;
      }
      check_eina_hash_int_return_own {
         return: bool;
      }

      // String //
      eina_hash_str_in {
         params {
            @in hsh: hash<string, string>;
         }
         return: bool;
      }

      eina_hash_str_in_own {
         params {
            @in hsh: hash<string, string @owned> @owned;
         }
         return: bool;
      }
      check_eina_hash_str_in_own {
         return: bool;
      }

      eina_hash_str_out {
         params {
            @out hsh: hash<string, string>;
         }
         return: bool;
      }
      check_eina_hash_str_out {
         return: bool;
      }

      eina_hash_str_out_own {
         params {
            @out hsh: hash<string, string @owned> @owned;
         }
         return: bool;
      }
      check_eina_hash_str_out_own {
         return: bool;
      }

      eina_hash_str_return {
         return: hash<string, string>;
      }
      check_eina_hash_str_return {
         return: bool;
      }

      eina_hash_str_return_own {
         return: hash<string, string @owned> @owned;
      }
      check_eina_hash_str_return_own {
         return: bool;
      }

      // Object //
      eina_hash_obj_in {
         params {
            @in hsh: hash<Test.Numberwrapper, Test.Numberwrapper>;
            @in nwk1: Test.Numberwrapper;
            @in nwv1: Test.Numberwrapper;
            @out nwk2: Test.Numberwrapper;
            @out nwv2: Test.Numberwrapper;
         }
         return: bool;
      }

      eina_hash_obj_in_own {
         params {
            @in hsh: hash<Test.Numberwrapper, Test.Numberwrapper @owned> @owned;
            @in nwk1: Test.Numberwrapper;
            @in nwv1: Test.Numberwrapper;
            @out nwk2: Test.Numberwrapper;
            @out nwv2: Test.Numberwrapper;
         }
         return: bool;
      }
      check_eina_hash_obj_in_own {
         params {
            @in nwk1: Test.Numberwrapper;
            @in nwv1: Test.Numberwrapper;
            @in nwk2: Test.Numberwrapper;
            @in nwv2: Test.Numberwrapper;
         }
         return: bool;
      }

      eina_hash_obj_out {
         params {
            @out hsh: hash<Test.Numberwrapper, Test.Numberwrapper>;
            @out nwk: Test.Numberwrapper;
            @out nwv: Test.Numberwrapper;
         }
         return: bool;
      }
      check_eina_hash_obj_out {
         params {
            @in nwk1: Test.Numberwrapper;
            @in nwv1: Test.Numberwrapper;
            @in nwk2: Test.Numberwrapper;
            @in nwv2: Test.Numberwrapper;
         }
         return: bool;
      }

      eina_hash_obj_out_own {
         params {
            @out hsh: hash<Test.Numberwrapper, Test.Numberwrapper @owned> @owned;
            @out nwk: Test.Numberwrapper;
            @out nwv: Test.Numberwrapper;
         }
         return: bool;
      }
      check_eina_hash_obj_out_own {
         return: bool;
      }

      eina_hash_obj_return {
         params {
            @out nwk: Test.Numberwrapper;
            @out nwv: Test.Numberwrapper;
         }
         return: hash<Test.Numberwrapper, Test.Numberwrapper>;
      }
      check_eina_hash_obj_return {
         params {
            @in nwk1: Test.Numberwrapper;
            @in nwv1: Test.Numberwrapper;
            @in nwk2: Test.Numberwrapper;
            @in nwv2: Test.Numberwrapper;
         }
         return: bool;
      }

      eina_hash_obj_return_own {
         params {
            @out nwk: Test.Numberwrapper;
            @out nwv: Test.Numberwrapper;
         }
         return: hash<Test.Numberwrapper, Test.Numberwrapper @owned> @owned;
      }
      check_eina_hash_obj_return_own {
         return: bool;
      }

      /* Eina Iterator */

      /* Integer */
      eina_iterator_int_in {
         params {
            @in itr: iterator<int>;
         }
         return: bool;
      }

      eina_iterator_int_in_own {
         params {
            @in itr: iterator<ptr(int) @owned> @owned;
         }
         return: bool;
      }
      check_eina_iterator_int_in_own {
         return: bool;
      }

      eina_iterator_int_out {
         params {
            @out itr: iterator<int>;
         }
         return: bool;
      }
      check_eina_iterator_int_out {
         return: bool;
      }

      eina_iterator_int_out_own {
         params {
            @out itr: iterator<ptr(int) @owned> @owned;
         }
         return: bool;
      }

      eina_iterator_int_return {
         return: iterator<int>;
      }
      check_eina_iterator_int_return {
         return: bool;
      }

      eina_iterator_int_return_own {
         return: iterator<ptr(int) @owned> @owned;
      }

      /* String */
      eina_iterator_str_in {
         params {
            @in itr: iterator<string>;
         }
         return: bool;
      }

      eina_iterator_str_in_own {
         params {
            @in itr: iterator<string @owned> @owned;
         }
         return: bool;
      }
      check_eina_iterator_str_in_own {
         return: bool;
      }

      eina_iterator_str_out {
         params {
            @out itr: iterator<string>;
         }
         return: bool;
      }
      check_eina_iterator_str_out {
         return: bool;
      }

      eina_iterator_str_out_own {
         params {
            @out itr: iterator<string @owned> @owned;
         }
         return: bool;
      }

      eina_iterator_str_return {
         return: iterator<string>;
      }
      check_eina_iterator_str_return {
         return: bool;
      }

      eina_iterator_str_return_own {
         return: iterator<string @owned> @owned;
      }

      /* Object */
      eina_iterator_obj_in {
         params {
            @in itr: iterator<Test.Numberwrapper>;
         }
         return: bool;
      }

      eina_iterator_obj_in_own {
         params {
            @in itr: iterator<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }
      check_eina_iterator_obj_in_own {
         return: bool;
      }

      eina_iterator_obj_out {
         params {
            @out itr: iterator<Test.Numberwrapper>;
         }
         return: bool;
      }
      check_eina_iterator_obj_out {
         return: bool;
      }

      eina_iterator_obj_out_own {
         params {
            @out itr: iterator<Test.Numberwrapper @owned> @owned;
         }
         return: bool;
      }

      eina_iterator_obj_return {
         return: iterator<Test.Numberwrapper>;
      }
      check_eina_iterator_obj_return {
         return: bool;
      }

      eina_iterator_obj_return_own {
         return: iterator<Test.Numberwrapper @owned> @owned;
      }

     /* Function Pointer */

     set_callback {
         params {
            cb: Test.SimpleCb;
         }
      }

      call_callback {
         params {
            a: int;
         }
         return: int;
      }

      call_set_callback {
      }

      raises_eina_error {

      }

      children_raise_error {

      }
      call_children_raise_error {

      }

      error_ret_set {
         params {
            error: Eina.Error;
         }
      }

      returns_error {
         return: Eina.Error;
      }

      /* Eina Values */
      set_value_ptr {
         params {
            value: any_value_ptr;
         }
      }

      set_value_ptr_own {
         params {
            value: any_value_ptr @owned;
         }
      }

      set_value {
         params {
            value: any_value;
         }
      }

      get_value_ptr_own {
         return: any_value_ptr @owned;
      }

      get_value_ptr {
         return: any_value_ptr;
      }

      /* Commented out due to issues regarding eolian treatment of any_value.
       * Somehow eolian is giving 0 as the default value when declaring the function below,
       * leading to compiler errors.
       */
      /* get_value {
         return: any_value;
      }
      */

      clear_value {
      }

      out_value_ptr {
         params {
            @out value: any_value_ptr;
         }
      }

      out_value_ptr_own {
         params {
            @out value: any_value_ptr @owned;
         }
      }

      out_value {
         params {
            @out value: any_value;
         }
      }
   }
   implements {
      class.constructor;
      class.destructor;
   }
}
