import efl_gesture_types;

abstract Efl.Gesture.Recognizer(Efl.Object)
{
   methods {
      create @pure_virtual{
         [[This function is called to create a new Efl.Gesture object for the given target]]

         params {
            @in target: Efl.Object; [[The target widget]]
         }
         return: Efl.Gesture; [[Returns the Efl.Gesture event object]]
      }
      recognize @pure_virtual{
         [[Handles the given event for the watched object, updating the state of the gesture object as required, and returns a suitable result for the current recognition step.]]

         params {
            @in gesture: Efl.Gesture; [[The gesture object]]
            @in watched: Efl.Object; [[The watched object]]
            @in event: Efl.Gesture.Touch; [[The pointer event]]

         }
         return: Efl.Gesture.Recognizer.Result; [[Returns the Efl.Gesture event object]]
      }
      reset {
         [[This function is called by the framework to reset a given gesture.]]

         params {
            @in gesture: Efl.Gesture; [[The gesture object]]
         }
      }
      @property config{
         [[This property holds the config value for the recognizer]]
         get {
         }
         keys {
            name: string; [[propery name]]
         }
         values {
            value: ptr(any_value); [[value of the property]]
         }
      }
   }
}