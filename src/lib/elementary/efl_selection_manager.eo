class Efl.Selection.Manager (Efl.Object, Efl.Selection) {
   methods {
      selection_set {
         params {
            @in owner: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in buf: const(void_ptr);
            @in len: int; [[The buffer's length.]]
            @in seat: Efl.Input.Device @optional;[[Specified seat for multiple seats case.]]
         }
      }
      selection_get {
         params {
            @in owner: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in data_func: Efl.Selection.Data_Ready; [[Data ready function pointer]]
            @in seat: Efl.Input.Device @optional;[[Specified seat for multiple seats case.]]
         }
      }
      selection_clear {
         params {
            @in owner: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
         }
      }
      selection_loss_feedback { //name!!!
         params {
            @in owner: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection type]]
         }
         return: future<generic_value>; [[Future of selection that is ready]]
      }
   }
   implements {
      //Efl.Selection.selection_set;
      //Efl.Selection.selection_get;
      //Efl.Selection.selection_clear;
      //Efl.Selection.selection_loss_feedback;
   }
   events {
      selection,loss; [[Called when seleciton is lost]]
   }
}
